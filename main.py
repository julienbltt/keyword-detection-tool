#!/usr/bin/env python3
"""
Script de test pour le d√©tecteur de mot de r√©veil.
D√©monstration de l'architecture modulaire.
"""

import logging
import time
import os
from datetime import datetime

import openwakeword.utils
from wakeword_detector import WakeWordDetector
import openwakeword

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Actions modulaires √† d√©clencher
class WakeWordActions:
    """Classe contenant les actions √† ex√©cuter lors de la d√©tection."""
    
    @staticmethod
    def on_hey_companion(wakeword: str, score: float):
        """Action d√©clench√©e pour 'Hey Companion'."""
        print(f"\nüéØ D√âTECTION: {wakeword} (confiance: {score:.2%})")
        print(f"‚è∞ Heure: {datetime.now().strftime('%H:%M:%S')}")
        
        # Exemple d'actions possibles :
        print("üîä Assistant activ√© ! Que puis-je faire pour vous ?")
        
        # Ici, vous pourriez :
        # - D√©clencher l'√©coute STT
        # - Allumer une LED
        # - Jouer un son de confirmation
        # - Activer d'autres modules
        
        # Simulation d'une action
        print("üí° Ex√©cution de l'action...")
        time.sleep(1)
        print("‚úÖ Action termin√©e\n")
    
    @staticmethod
    def on_alexa(wakeword: str, score: float):
        """Action pour un autre mot de r√©veil (exemple)."""
        print(f"\nüì¢ Autre mot d√©tect√©: {wakeword} ({score:.2%})")
        print("‚ùå Ce n'est pas le bon mot de r√©veil\n")

def test_custom_model():
    """Test avec un mod√®le personnalis√© (si disponible)."""
    custom_model_path = "models/hey_companion.onnx"
    
    if os.path.exists(custom_model_path):
        logger.info("Utilisation du mod√®le personnalis√©")
        return [custom_model_path]
    else:
        logger.warning("Mod√®le personnalis√© non trouv√©, utilisation du mod√®le par d√©faut")
        return ['alexa']  # Mod√®le par d√©faut d'openWakeWord

def main():
    """Fonction principale de test."""
    print("üîç Initialisation du test du d√©tecteur de mot de r√©veil")
    # V√©rifier si le r√©pertoire "resources/models" existe
    if not os.path.exists("resources/models"):
        print("Download et installation de openWakeWord")
        # One-time download of all pre-trained models (or only select models)
        openwakeword.utils.download_models()
        print("‚úÖ openWakeWord install√© avec succ√®s\n")

    print("üöÄ D√©marrage du test du d√©tecteur de mot de r√©veil")
    print("=" * 50)
    
    # Configuration des mod√®les
    models = test_custom_model()
    
    # Cr√©ation du d√©tecteur avec configuration personnalis√©e
    detector = WakeWordDetector(
        wakeword_models=models.copy(),
        threshold=0.5,  # Ajustez selon vos besoins (0.3 = sensible, 0.7 = strict)
        chunk_size=1280,
        sample_rate=16000,
        logger=logger
    )
    
    # Enregistrement des callbacks modulaires
    actions = WakeWordActions()
    
    logger.info(f"Mod√®les de mot de r√©veil charg√©s: {models}")
    # Associer chaque mot de r√©veil √† une action
    if 'alexa' in models:
        logger.info("Enregistrement du callback pour 'alexa'")
        detector.register_callback('alexa', actions.on_hey_companion)
    
    # Si vous avez un mod√®le personnalis√©
    if 'hey_companion' in models:
        detector.register_callback('hey_companion', actions.on_hey_companion)
    
    # D√©marrage de l'√©coute
    print("\nüé§ √âcoute active...")
    print("üí¨ Dites 'Hey Companion' (ou le mot configur√©) pour d√©clencher une action")
    print("‚å®Ô∏è  Appuyez sur Ctrl+C pour arr√™ter\n")
    
    try:
        # Utilisation avec context manager
        with detector:
            # Boucle principale
            while True:
                time.sleep(0.1)
                
    except KeyboardInterrupt:
        print("\n\nüõë Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur inattendue: {e}")
    finally:
        print("üëã Arr√™t du test")

if __name__ == "__main__":
    main()